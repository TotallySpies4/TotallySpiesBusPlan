version: '3'
services:
  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    volumes:
      - ./frontend:/app
  backend:
    build: ./backend
    image: backend_image
    ports:
      - "4000:4000"
    environment:
      - MONGO_URI=mongodb://mongodb:27017/TotallySpiesBusPlan
    volumes:
      - ./backend:/app
      - shared_volume:/app/shared
    depends_on:
      - mongodb

  backend-tests:
      build: ./backend
      command: npm test
      volumes:
        - ./:/app
      environment:
        - NODE_ENV=test

  gtfs_data_harvest:
    build: ./GTFSDataHarvest
    container_name: gtfs_data_harvest_container
    restart: always

  ml-service:
    build: ./ml-service
    image: ml_service_image
    ports:
      - "6000:6000"
    volumes:
      - ./ml-service:/app
      - shared_volume:/app/shared
    depends_on:
      - mongodb
  mongodb:
    image: "mongo:latest"
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
  mongo-express:
    image: "mongo-express:latest"
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=totallyspies
      - ME_CONFIG_BASICAUTH_PASSWORD=totallyspies
    depends_on:
      - mongodb
  jenkins:
    image: jenkins/jenkins:lts
    ports:
      - "8080:8080"
    volumes:
      - jenkins_home:/var/jenkins_home
  ngrok:
    image: ngrok/ngrok:latest
    restart: unless-stopped
    command:
      - "start"
      - "--all"
      - "--config"
      - "/etc/ngrok.yml"
    volumes:
      - ./ngrok.yml:/etc/ngrok.yml
    ports:
      - "4040:4040"
    depends_on:
      - jenkins
  sonarqube:
    image: sonarqube:latest
    ports:
      - "9000:9000"
    networks:
      - sonarnet
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
  sonar-scanner:
    image: sonarsource/sonar-scanner-cli
    command: >
      sh -c "sleep 30 && sonar-scanner
      -Dsonar.projectKey=totallyspies
      -Dsonar.sources=/code
      -Dsonar.projectBaseDir=/code
      -Dsonar.exclusions=**/node_modules/**,**/bin/**,**/obj/**
      -Dsonar.host.url=http://sonarqube:9000
      -Dsonar.token=sqa_9a51af578ac964ae21b5328c503c87bc8b9c8ce4"
    volumes:
      - .:/code
    depends_on:
      - sonarqube
    networks:
      - sonarnet
  db:
    image: postgres:latest
    networks:
      - sonarnet
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
      image: confluentinc/cp-kafka:latest
      depends_on:
        - zookeeper
      ports:
        - "9092:9092"
      environment:
        KAFKA_MESSAGE_MAX_BYTES: 200000000
        KAFKA_MAX_REQUEST_SIZE: 200000000
        KAFKA_MAX_PARTITION_FETCH_BYTES: 200000000
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1


networks:
  sonarnet:
    driver: bridge

volumes:
  mongodb_data:
  jenkins_home:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_bundled-plugins:
  postgresql:
  postgresql_data:
  shared_volume:




